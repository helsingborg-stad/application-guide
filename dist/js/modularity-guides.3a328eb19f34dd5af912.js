!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t,n){"use strict";n.r(t);(function(e){function t(t){var n,o;t.preventDefault();var r=t.target,i=r.closest(".js-modularity-guide-todos"),a=null==r||null===(n=r.querySelector('textarea[name="g-recaptcha-response"]'))||void 0===n?void 0:n.val(),u=null==r||null===(o=r.querySelector('input[name="email"]'))||void 0===o?void 0:o.value;if(""===a)return!1;var l=null==i?void 0:i.querySelector(".js-modularity-guide-todos__table");if(l&&u&&ajaxurl){var c={action:"email_todo",checklist:function(e){var t,n,o=e.cloneNode(!0);null===(t=o=document.body.appendChild(o))||void 0===t||null===(n=t.querySelectorAll("tr"))||void 0===n||n.forEach((function(e){var t;(t=e).offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0||e.remove()}));var r=o.outerHTML;return o.remove(),encodeURI(r)}(l),email:u,captcha:a};e.post(ajaxurl,c,(function(e){"success"==e?console.log("success!"):console.log("fails!"),location.hash=""}))}}window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelectorAll(".js-modularity-guide-todos");(null==e?void 0:e.length)>0&&e.forEach((function(e){var n=null==e?void 0:e.querySelector(".js-modularity-guide-todos__form");n&&n.addEventListener("submit",t)}))}))})(jQuery),function(e){function t(){this.handleEvents(),this.contentToggleEngine()}t.prototype.handleEvents=function(){e('input[type="checkbox"][data-mod-guide-relation]').on("change",(function(t){var n=e(this).data("mod-guide-relation");n=n.split(","),e.each(n,(function(t,n){var o=e('input[type="checkbox"][data-mod-guide-toggle-key="'+n+'"]');o.prop("checked",!o.prop("checked")).trigger("change")}))})),e("[data-mod-guide-toggle-key]").on("change",function(e){this.contentToggleEngine()}.bind(this))},t.prototype.contentToggleEngine=function(){var t=[];e("[data-mod-guide-toggle-key]").each((function(n,o){!0===e(o).prop("checked")&&t.push(e(o).attr("data-mod-guide-toggle-key"))})),e("[data-mod-guide-toggle-key-content]").each((function(n,o){var r=!1,i=e(o).attr("data-mod-guide-toggle-key-content");i=i.split(","),e.each(i,(function(e,n){var o=n.match(/(^|\+)([^\+\-]+)/g),i=new RegExp("\\b("+o.join("|").replace("+","")+")\\b","ig"),a=t.join(",").match(i),u=null!==a&&a.length===o.length,l=n.match(/\-([^\+\-]+)/g),c=!0;if(null!==l){var d=new RegExp("\\b("+l.join("|").replace("-","")+")\\b","ig"),s=t.join(",").match(d);c=!(null!==s&&s.length>0)}u&&c&&(r=!0)})),!0!==r?e(o).hide():e(o).show()}))},new t}(jQuery);function o(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return r(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return r(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,o=new Array(t);n<t;n++)o[n]=e[n];return o}function i(e){var t;e.preventDefault();var n=e.target,o=e.target.classList.contains(".js-modularity-guide__next".substring(1)),r=null==n?void 0:n.closest(".js-modularity-guide"),i=null==n?void 0:n.closest(".js-modularity-guide__section"),a=parseInt(null!==(t=null==i?void 0:i.getAttribute("data-guide-step"))&&void 0!==t?t:"-1");if(a>0){var u=o?a+1:a-1,l=null==r?void 0:r.querySelector("[".concat("data-guide-step",'="').concat(u,'"]')),c=null==l?void 0:l.querySelector("[js-expand-button]");c&&c.click()}}function a(e){var t=[].concat(o(e.querySelectorAll("".concat(".js-modularity-guide__section"," ").concat(".js-modularity-guide__next"))),o(e.querySelectorAll("".concat(".js-modularity-guide__section"," ").concat(".js-modularity-guide__prev"))));t.length>0&&t.forEach((function(e){e.addEventListener("click",i)}))}window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelectorAll(".js-modularity-guide");e&&e.length>0&&e.forEach(a)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,