/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./source/js/modularity-guides.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./source/js/Content/Checkboxes.js":
/*!*****************************************!*\
  !*** ./source/js/Content/Checkboxes.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function ($) {\n  function Checkboxes() {\n    this.handleEvents();\n    this.contentToggleEngine();\n  }\n\n  Checkboxes.prototype.handleEvents = function () {\n    $('input[type=\"checkbox\"][data-mod-guide-relation]').on('change', function (e) {\n      var relations = $(this).data('mod-guide-relation');\n      relations = relations.split(',');\n      $.each(relations, function (index, item) {\n        var $cb = $('input[type=\"checkbox\"][data-mod-guide-toggle-key=\"' + item + '\"]');\n        $cb.prop('checked', !$cb.prop('checked')).trigger('change');\n      });\n    });\n    $('[data-mod-guide-toggle-key]').on('change', function (e) {\n      this.contentToggleEngine();\n    }.bind(this));\n  };\n\n  Checkboxes.prototype.contentToggleEngine = function () {\n    // Get checked checkboxes\n    var checked = [];\n    var $checkboxes = $('[data-mod-guide-toggle-key]');\n    $checkboxes.each(function (index, element) {\n      if ($(element).prop('checked') !== true) {\n        return;\n      }\n\n      checked.push($(element).attr('data-mod-guide-toggle-key'));\n    }); // Display or hide content\n\n    $('[data-mod-guide-toggle-key-content]').each(function (index, element) {\n      var shouldShow = false;\n      var conditions = $(element).attr('data-mod-guide-toggle-key-content');\n      conditions = conditions.split(','); // Datermind if content should be shown or not\n\n      $.each(conditions, function (index, item) {\n        var and = item.match(/(^|\\+)([^\\+\\-]+)/g);\n        var andPattern = new RegExp('\\\\b(' + and.join('|').replace('+', '') + ')\\\\b', 'ig');\n        var andMatches = checked.join(',').match(andPattern);\n        var andIsMatching = andMatches !== null && andMatches.length === and.length;\n        var andnot = item.match(/\\-([^\\+\\-]+)/g);\n        var andnotIsMatching = true;\n\n        if (andnot !== null) {\n          var andnotPattern = new RegExp('\\\\b(' + andnot.join('|').replace('-', '') + ')\\\\b', 'ig');\n          var andnotMatches = checked.join(',').match(andnotPattern);\n          andnotIsMatching = !(andnotMatches !== null && andnotMatches.length > 0);\n        }\n\n        if (andIsMatching && andnotIsMatching) {\n          shouldShow = true;\n        }\n      }); // Hide or show\n\n      if (shouldShow === true) {\n        $(element).show();\n        return;\n      }\n\n      $(element).hide();\n      return;\n    });\n  };\n\n  return new Checkboxes();\n})(jQuery));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvQ29udGVudC9DaGVja2JveGVzLmpzPzRlY2IiXSwibmFtZXMiOlsiJCIsIkNoZWNrYm94ZXMiLCJoYW5kbGVFdmVudHMiLCJjb250ZW50VG9nZ2xlRW5naW5lIiwicHJvdG90eXBlIiwib24iLCJlIiwicmVsYXRpb25zIiwiZGF0YSIsInNwbGl0IiwiZWFjaCIsImluZGV4IiwiaXRlbSIsIiRjYiIsInByb3AiLCJ0cmlnZ2VyIiwiYmluZCIsImNoZWNrZWQiLCIkY2hlY2tib3hlcyIsImVsZW1lbnQiLCJwdXNoIiwiYXR0ciIsInNob3VsZFNob3ciLCJjb25kaXRpb25zIiwiYW5kIiwibWF0Y2giLCJhbmRQYXR0ZXJuIiwiUmVnRXhwIiwiam9pbiIsInJlcGxhY2UiLCJhbmRNYXRjaGVzIiwiYW5kSXNNYXRjaGluZyIsImxlbmd0aCIsImFuZG5vdCIsImFuZG5vdElzTWF0Y2hpbmciLCJhbmRub3RQYXR0ZXJuIiwiYW5kbm90TWF0Y2hlcyIsInNob3ciLCJoaWRlIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLGdFQUFDLFVBQVVBLENBQVYsRUFBYTtBQUV6QixXQUFTQyxVQUFULEdBQXNCO0FBQ2xCLFNBQUtDLFlBQUw7QUFDQSxTQUFLQyxtQkFBTDtBQUNIOztBQUVERixZQUFVLENBQUNHLFNBQVgsQ0FBcUJGLFlBQXJCLEdBQW9DLFlBQVc7QUFDM0NGLEtBQUMsQ0FBQyxpREFBRCxDQUFELENBQXFESyxFQUFyRCxDQUF3RCxRQUF4RCxFQUFrRSxVQUFVQyxDQUFWLEVBQWE7QUFDM0UsVUFBSUMsU0FBUyxHQUFHUCxDQUFDLENBQUMsSUFBRCxDQUFELENBQVFRLElBQVIsQ0FBYSxvQkFBYixDQUFoQjtBQUNBRCxlQUFTLEdBQUdBLFNBQVMsQ0FBQ0UsS0FBVixDQUFnQixHQUFoQixDQUFaO0FBRUFULE9BQUMsQ0FBQ1UsSUFBRixDQUFPSCxTQUFQLEVBQWtCLFVBQVVJLEtBQVYsRUFBaUJDLElBQWpC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bkI7QUFDSDs7QUFFRCxZQUFJRCxhQUFhLElBQUlHLGdCQUFyQixFQUF1QztBQUNuQ1osb0JBQVUsR0FBRyxJQUFiO0FBQ0g7QUFDSixPQWpCRCxFQU5vRSxDQXlCcEU7O0FBQ0EsVUFBSUEsVUFBVSxLQUFLLElBQW5CLEVBQXlCO0FBQ3JCdEIsU0FBQyxDQUFDbUIsT0FBRCxDQUFELENBQVdrQixJQUFYO0FBQ0E7QUFDSDs7QUFFRHJDLE9BQUMsQ0FBQ21CLE9BQUQsQ0FBRCxDQUFXbUIsSUFBWDtBQUNBO0FBQ0gsS0FqQ0Q7QUFrQ0gsR0FoREQ7O0FBa0RBLFNBQU8sSUFBSXJDLFVBQUosRUFBUDtBQUVILENBM0VjLEVBMkVac0MsTUEzRVksQ0FBZiIsImZpbGUiOiIuL3NvdXJjZS9qcy9Db250ZW50L0NoZWNrYm94ZXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKCQpIHtcblxuICAgIGZ1bmN0aW9uIENoZWNrYm94ZXMoKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlRXZlbnRzKCk7XG4gICAgICAgIHRoaXMuY29udGVudFRvZ2dsZUVuZ2luZSgpO1xuICAgIH1cblxuICAgIENoZWNrYm94ZXMucHJvdG90eXBlLmhhbmRsZUV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl1bZGF0YS1tb2QtZ3VpZGUtcmVsYXRpb25dJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcmVsYXRpb25zID0gJCh0aGlzKS5kYXRhKCdtb2QtZ3VpZGUtcmVsYXRpb24nKTtcbiAgICAgICAgICAgIHJlbGF0aW9ucyA9IHJlbGF0aW9ucy5zcGxpdCgnLCcpO1xuXG4gICAgICAgICAgICAkLmVhY2gocmVsYXRpb25zLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgJGNiID0gJCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdW2RhdGEtbW9kLWd1aWRlLXRvZ2dsZS1rZXk9XCInICsgaXRlbSArICdcIl0nKTtcbiAgICAgICAgICAgICAgICAkY2IucHJvcCgnY2hlY2tlZCcsICEkY2IucHJvcCgnY2hlY2tlZCcpKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAkKCdbZGF0YS1tb2QtZ3VpZGUtdG9nZ2xlLWtleV0nKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudFRvZ2dsZUVuZ2luZSgpO1xuICAgICAgICB9LmJpbmQodGhpcykpO1xuICAgIH07XG5cbiAgICBDaGVja2JveGVzLnByb3RvdHlwZS5jb250ZW50VG9nZ2xlRW5naW5lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIEdldCBjaGVja2VkIGNoZWNrYm94ZXNcbiAgICAgICAgdmFyIGNoZWNrZWQgPSBbXTtcbiAgICAgICAgdmFyICRjaGVja2JveGVzID0gJCgnW2RhdGEtbW9kLWd1aWRlLXRvZ2dsZS1rZXldJyk7XG5cbiAgICAgICAgJGNoZWNrYm94ZXMuZWFjaChmdW5jdGlvbiAoaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICgkKGVsZW1lbnQpLnByb3AoJ2NoZWNrZWQnKSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2hlY2tlZC5wdXNoKCQoZWxlbWVudCkuYXR0cignZGF0YS1tb2QtZ3VpZGUtdG9nZ2xlLWtleScpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRGlzcGxheSBvciBoaWRlIGNvbnRlbnRcbiAgICAgICAgJCgnW2RhdGEtbW9kLWd1aWRlLXRvZ2dsZS1rZXktY29udGVudF0nKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIHNob3VsZFNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBjb25kaXRpb25zID0gJChlbGVtZW50KS5hdHRyKCdkYXRhLW1vZC1ndWlkZS10b2dnbGUta2V5LWNvbnRlbnQnKTtcbiAgICAgICAgICAgIGNvbmRpdGlvbnMgPSBjb25kaXRpb25zLnNwbGl0KCcsJyk7XG5cbiAgICAgICAgICAgIC8vIERhdGVybWluZCBpZiBjb250ZW50IHNob3VsZCBiZSBzaG93biBvciBub3RcbiAgICAgICAgICAgICQuZWFjaChjb25kaXRpb25zLCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgYW5kID0gaXRlbS5tYXRjaCgvKF58XFwrKShbXlxcK1xcLV0rKS9nKTtcbiAgICAgICAgICAgICAgICB2YXIgYW5kUGF0dGVybiA9IG5ldyBSZWdFeHAoJ1xcXFxiKCcgKyBhbmQuam9pbignfCcpLnJlcGxhY2UoJysnLCAnJykgKyAnKVxcXFxiJywgJ2lnJyk7XG4gICAgICAgICAgICAgICAgdmFyIGFuZE1hdGNoZXMgPSBjaGVja2VkLmpvaW4oJywnKS5tYXRjaChhbmRQYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICB2YXIgYW5kSXNNYXRjaGluZyA9IGFuZE1hdGNoZXMgIT09IG51bGwgJiYgYW5kTWF0Y2hlcy5sZW5ndGggPT09IGFuZC5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICB2YXIgYW5kbm90ID0gaXRlbS5tYXRjaCgvXFwtKFteXFwrXFwtXSspL2cpO1xuICAgICAgICAgICAgICAgIHZhciBhbmRub3RJc01hdGNoaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoYW5kbm90ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmRub3RQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnXFxcXGIoJyArIGFuZG5vdC5qb2luKCd8JykucmVwbGFjZSgnLScsICcnKSArICcpXFxcXGInLCAnaWcnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuZG5vdE1hdGNoZXMgPSBjaGVja2VkLmpvaW4oJywnKS5tYXRjaChhbmRub3RQYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICAgICAgYW5kbm90SXNNYXRjaGluZyA9ICEoYW5kbm90TWF0Y2hlcyAhPT0gbnVsbCAmJiBhbmRub3RNYXRjaGVzLmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChhbmRJc01hdGNoaW5nICYmIGFuZG5vdElzTWF0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkU2hvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEhpZGUgb3Igc2hvd1xuICAgICAgICAgICAgaWYgKHNob3VsZFNob3cgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLnNob3coKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQoZWxlbWVudCkuaGlkZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBDaGVja2JveGVzKCk7XG5cbn0pKGpRdWVyeSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./source/js/Content/Checkboxes.js\n");

/***/ }),

/***/ "./source/js/Content/Todo.js":
/*!***********************************!*\
  !*** ./source/js/Content/Todo.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ((function ($) {\n  function Todo() {\n    $('#modal-email-todo form').on('submit', function (e) {\n      e.preventDefault();\n      var $container = $(e.target).parents('.grid').first();\n\n      if ($container.find('textarea[name=\"g-recaptcha-response\"]').val() === '') {\n        return false;\n      }\n\n      $(this).find('input[type=\"submit\"]').hide();\n      $(this).find('.modal-footer').append('<div class=\"loading\"><div></div><div></div><div></div><div></div></div>');\n      var $checklist = $container.first().find('table').clone();\n      $checklist.appendTo(document.body);\n      $checklist.find('tr').not(':visible').remove();\n      checklistHTML = $checklist[0].outerHTML;\n      $checklist.remove();\n      checklist = encodeURI(checklistHTML);\n      var gCaptcha = $container.find('textarea[name=\"g-recaptcha-response\"]').val();\n      var data = {\n        action: 'email_todo',\n        checklist: checklist,\n        email: $container.find('input[name=\"email\"]').val(),\n        captcha: gCaptcha\n      };\n      $.post(ajaxurl, data, function (response) {\n        $container.find('.loading').remove();\n        $container.find('input[type=\"submit\"]').show();\n\n        if (response == 'success') {\n          $container.after('<div class=\"grid\"><div class=\"grid-md-12\"><div class=\"notice success\">' + guides.email_sent + '</div></div></div>');\n        } else {\n          $container.after('<div class=\"grid\"><div class=\"grid-md-12\"><div class=\"notice warning\">' + guides.email_failed + '</div></div></div>');\n        }\n\n        location.hash = '';\n      });\n      return false;\n    });\n  }\n\n  return new Todo();\n})(jQuery));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvQ29udGVudC9Ub2RvLmpzP2UyYjEiXSwibmFtZXMiOlsiJCIsIlRvZG8iLCJvbiIsImUiLCJwcmV2ZW50RGVmYXVsdCIsIiRjb250YWluZXIiLCJ0YXJnZXQiLCJwYXJlbnRzIiwiZmlyc3QiLCJmaW5kIiwidmFsIiwiaGlkZSIsImFwcGVuZCIsIiRjaGVja2xpc3QiLCJjbG9uZSIsImFwcGVuZFRvIiwiZG9jdW1lbnQiLCJib2R5Iiwibm90IiwicmVtb3ZlIiwiY2hlY2tsaXN0SFRNTCIsIm91dGVySFRNTCIsImNoZWNrbGlzdCIsImVuY29kZVVSSSIsImdDYXB0Y2hhIiwiZGF0YSIsImFjdGlvbiIsImVtYWlsIiwiY2FwdGNoYSIsInBvc3QiLCJhamF4dXJsIiwicmVzcG9uc2UiLCJzaG93IiwiYWZ0ZXIiLCJndWlkZXMiLCJlbWFpbF9zZW50IiwiZW1haWxfZmFpbGVkIiwibG9jYXRpb24iLCJoYXNoIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLGdFQUFDLFVBQVVBLENBQVYsRUFBYTtBQUV6QixXQUFTQyxJQUFULEdBQWdCO0FBQ1pELEtBQUMsQ0FBQyx3QkFBRCxDQUFELENBQTRCRSxFQUE1QixDQUErQixRQUEvQixFQUF5QyxVQUFVQyxDQUFWLEVBQWE7QUFDbERBLE9BQUMsQ0FBQ0MsY0FBRjtBQUVBLFVBQUlDLFVBQVUsR0FBR0wsQ0FBQyxDQUFDRyxDQUFDLENBQUNHLE1BQUgsQ0FBRCxDQUFZQyxPQUFaLENBQW9CLE9BQXBCLEVBQTZCQyxLQUE3QixFQUFqQjs7QUFDQSxVQUFJSCxVQUFVLENBQUNJLElBQVgsQ0FBZ0IsdUNBQWhCLEVBQXlEQyxHQUF6RCxPQUFtRSxFQUF2RSxFQUEyRTtBQUN2RSxlQUFPLEtBQVA7QUFDSDs7QUFFRFYsT0FBQyxDQUFDLElBQUQsQ0FBRCxDQUFRUyxJQUFSLENBQWEsc0JBQWIsRUFBcUNFLElBQXJDO0FBQ0FYLE9BQUMsQ0FBQyxJQUFELENBQUQsQ0FBUVMsSUFBUixDQUFhLGVBQWIsRUFBOEJHLE1BQTlCLENBQXFDLHlFQUFyQztBQUVBLFVBQUlDLFVBQVUsR0FBR1IsVUFBVSxDQUFDRyxLQUFYLEdBQW1CQyxJQUFuQixDQUF3QixPQUF4QixFQUFpQ0ssS0FBakMsRUFBakI7QUFDQUQsZ0JBQVUsQ0FBQ0UsUUFBWCxDQUFvQkMsUUFBUSxDQUFDQyxJQUE3QjtBQUNBSixnQkFBVSxDQUFDSixJQUFYLENBQWdCLElBQWhCLEVBQXNCUyxHQUF0QixDQUEwQixVQUExQixFQUFzQ0MsTUFBdEM7QUFDQUMsbUJBQWEsR0FBR1AsVUFBVSxDQUFDLENBQUQsQ0FBVixDQUFjUSxTQUE5QjtBQUNBUixnQkFBVSxDQUFDTSxNQUFYO0FBRUFHLGVBQVMsR0FBR0MsU0FBUyxDQUFDSCxhQUFELENBQXJCO0FBRUEsVUFBSUksUUFBUSxHQUFHbkIsVUFBVSxDQUFDSSxJQUFYLENBQWdCLHVDQUFoQixFQUF5REMsR0FBekQsRUFBZjtBQUVBLFVBQUllLElBQUksR0FBRztBQUNQQyxjQUFNLEVBQUUsWUFERDtBQUVQSixpQkFBUyxFQUFFQSxTQUZKO0FBR1BLLGFBQUssRUFBRXRCLFVBQVUsQ0FBQ0ksSUFBWCxDQUFnQixxQkFBaEIsRUFBdUNDLEdBQXZDLEVBSEE7QUFJUGtCLGVBQU8sRUFBRUo7QUFKRixPQUFYO0FBT0F4QixPQUFDLENBQUM2QixJQUFGLENBQU9DLE9BQVAsRUFBZ0JMLElBQWhCLEVBQXNCLFVBQVVNLFFBQVYsRUFBb0I7QUFDdEMxQixrQkFBVSxDQUFDSSxJQUFYLENBQWdCLFVBQWhCLEVBQTRCVSxNQUE1QjtBQUNBZCxrQkFBVSxDQUFDSSxJQUFYLENBQWdCLHNCQUFoQixFQUF3Q3VCLElBQXhDOztBQUVBLFlBQUlELFFBQVEsSUFBSSxTQUFoQixFQUEyQjtBQUN2QjFCLG9CQUFVLENBQUM0QixLQUFYLENBQWlCLDJFQUEyRUMsTUFBTSxDQUFDQyxVQUFsRixHQUErRixvQkFBaEg7QUFDSCxTQUZELE1BRU87QUFDSDlCLG9CQUFVLENBQUM0QixLQUFYLENBQWlCLDJFQUEyRUMsTUFBTSxDQUFDRSxZQUFsRixHQUFpRyxvQkFBbEg7QUFDSDs7QUFFREMsZ0JBQVEsQ0FBQ0MsSUFBVCxHQUFnQixFQUFoQjtBQUNILE9BWEQ7QUFhQSxhQUFPLEtBQVA7QUFDSCxLQTFDRDtBQTJDSDs7QUFFRCxTQUFPLElBQUlyQyxJQUFKLEVBQVA7QUFFSCxDQWxEYyxFQWtEWnNDLE1BbERZLENBQWYiLCJmaWxlIjoiLi9zb3VyY2UvanMvQ29udGVudC9Ub2RvLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICgkKSB7XG5cbiAgICBmdW5jdGlvbiBUb2RvKCkge1xuICAgICAgICAkKCcjbW9kYWwtZW1haWwtdG9kbyBmb3JtJykub24oJ3N1Ym1pdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHZhciAkY29udGFpbmVyID0gJChlLnRhcmdldCkucGFyZW50cygnLmdyaWQnKS5maXJzdCgpO1xuICAgICAgICAgICAgaWYgKCRjb250YWluZXIuZmluZCgndGV4dGFyZWFbbmFtZT1cImctcmVjYXB0Y2hhLXJlc3BvbnNlXCJdJykudmFsKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAkKHRoaXMpLmZpbmQoJ2lucHV0W3R5cGU9XCJzdWJtaXRcIl0nKS5oaWRlKCk7XG4gICAgICAgICAgICAkKHRoaXMpLmZpbmQoJy5tb2RhbC1mb290ZXInKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJsb2FkaW5nXCI+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48L2Rpdj4nKTtcblxuICAgICAgICAgICAgdmFyICRjaGVja2xpc3QgPSAkY29udGFpbmVyLmZpcnN0KCkuZmluZCgndGFibGUnKS5jbG9uZSgpO1xuICAgICAgICAgICAgJGNoZWNrbGlzdC5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgICAgICRjaGVja2xpc3QuZmluZCgndHInKS5ub3QoJzp2aXNpYmxlJykucmVtb3ZlKCk7XG4gICAgICAgICAgICBjaGVja2xpc3RIVE1MID0gJGNoZWNrbGlzdFswXS5vdXRlckhUTUw7XG4gICAgICAgICAgICAkY2hlY2tsaXN0LnJlbW92ZSgpO1xuXG4gICAgICAgICAgICBjaGVja2xpc3QgPSBlbmNvZGVVUkkoY2hlY2tsaXN0SFRNTCk7XG5cbiAgICAgICAgICAgIHZhciBnQ2FwdGNoYSA9ICRjb250YWluZXIuZmluZCgndGV4dGFyZWFbbmFtZT1cImctcmVjYXB0Y2hhLXJlc3BvbnNlXCJdJykudmFsKCk7XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0ge1xuICAgICAgICAgICAgICAgIGFjdGlvbjogJ2VtYWlsX3RvZG8nLFxuICAgICAgICAgICAgICAgIGNoZWNrbGlzdDogY2hlY2tsaXN0LFxuICAgICAgICAgICAgICAgIGVtYWlsOiAkY29udGFpbmVyLmZpbmQoJ2lucHV0W25hbWU9XCJlbWFpbFwiXScpLnZhbCgpLFxuICAgICAgICAgICAgICAgIGNhcHRjaGE6IGdDYXB0Y2hhXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkLnBvc3QoYWpheHVybCwgZGF0YSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgJGNvbnRhaW5lci5maW5kKCcubG9hZGluZycpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpLnNob3coKTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSA9PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZnRlcignPGRpdiBjbGFzcz1cImdyaWRcIj48ZGl2IGNsYXNzPVwiZ3JpZC1tZC0xMlwiPjxkaXYgY2xhc3M9XCJub3RpY2Ugc3VjY2Vzc1wiPicgKyBndWlkZXMuZW1haWxfc2VudCArICc8L2Rpdj48L2Rpdj48L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkY29udGFpbmVyLmFmdGVyKCc8ZGl2IGNsYXNzPVwiZ3JpZFwiPjxkaXYgY2xhc3M9XCJncmlkLW1kLTEyXCI+PGRpdiBjbGFzcz1cIm5vdGljZSB3YXJuaW5nXCI+JyArIGd1aWRlcy5lbWFpbF9mYWlsZWQgKyAnPC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBUb2RvKCk7XG5cbn0pKGpRdWVyeSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./source/js/Content/Todo.js\n");

/***/ }),

/***/ "./source/js/modularity-guides.js":
/*!****************************************!*\
  !*** ./source/js/modularity-guides.js ***!
  \****************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Content_Checkboxes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Content/Checkboxes.js */ \"./source/js/Content/Checkboxes.js\");\n/* harmony import */ var _Content_Todo_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Content/Todo.js */ \"./source/js/Content/Todo.js\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n/**\n * Guide steps and views\n */\n\nvar GuideDefault = /*#__PURE__*/function () {\n  /**\n   * Init\n   */\n  function GuideDefault() {\n    _classCallCheck(this, GuideDefault);\n\n    this.initView();\n  }\n  /**\n   * Get Section ID\n   * @returns {string}\n   */\n\n\n  _createClass(GuideDefault, [{\n    key: \"sectionId\",\n    value: function sectionId() {\n      return document.querySelector('.mod-guide-wrapper .c-option__radio input:checked').getAttribute('guide-section');\n    }\n    /**\n     * Init the first step in guide\n     * Activate all steps\n     */\n\n  }, {\n    key: \"initView\",\n    value: function initView() {\n      var int = 0; //Reset stuff - Hack Component library cards to look like \"accordish\" ......\n\n      var _iterator = _createForOfIteratorHelper(document.body.querySelectorAll('.c-card')),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var firstElement = _step.value;\n\n          if (int < 1) {\n            firstElement.querySelector('.c-card__body').classList.Border = '1px solid red';\n            firstElement.querySelector('.c-card__body').setAttribute('c-card--collapse', 'c-card--collapse');\n            firstElement.querySelector('.c-card__body').classList.remove('c-card--collapse');\n          }\n\n          int++;\n        } // Maybe remove ......\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(document.body.querySelectorAll('.mod-guide-wrapper .c-option__checkbox--hidden-box')),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var disabled = _step2.value;\n          document.body.querySelector('.mod-guide-wrapper .c-option__radio--hidden-box').removeAttribute('disabled');\n        } //this.collectRequiredElements();\n\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this.prepareEvent();\n      this.prevNextStep();\n    }\n    /**\n     * Change Step in guide\n     */\n\n  }, {\n    key: \"prepareEvent\",\n    value: function prepareEvent() {\n      var self = this; // Prepare views - Listen to section change\n\n      var _iterator3 = _createForOfIteratorHelper(document.body.querySelectorAll('.c-option__radio--hidden-box')),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var stepOption = _step3.value;\n\n          // If item is disabled listen to parent\n          if (stepOption.hasAttribute('disabled')) {\n            stepOption.parentElement.addEventListener(\"click\", function () {\n              self.requiredNotice(this);\n            }, false);\n          } //Check fore requirements\n\n\n          stepOption.addEventListener(\"change\", function () {\n            self.collectRequiredElements();\n            self.changeView(this);\n          }, false);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * Change view\n     */\n\n  }, {\n    key: \"changeView\",\n    value: function changeView(element) {\n      // Restore views\n      var _iterator4 = _createForOfIteratorHelper(document.querySelectorAll('.c-card .c-card__body')),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var hideOption = _step4.value;\n          hideOption.removeAttribute('c-card--collapse');\n          hideOption.classList.add('c-card--collapse');\n        } // Change view by adding or removing attributes and css classes -> styleguide\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var thisElementId = element.getAttribute('guide-section');\n      document.getElementById(thisElementId).querySelector('.c-card__body').setAttribute('c-card--collapse', 'c-card--collapse');\n      document.getElementById(thisElementId).querySelector('.c-card__body').classList.remove('c-card--collapse'); // Check for required stuff\n\n      if (this.collectRequiredElements()) {\n        element.removeAttribute('disabled');\n        var int = 0;\n\n        var _iterator5 = _createForOfIteratorHelper(document.body.querySelectorAll('.mod-guide-wrapper .c-option__checkbox--hidden-box')),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var disabled = _step5.value;\n\n            if (int === 1) {\n              disabled.setAttribute('disabled', false);\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n    /**\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"collectRequiredElements\",\n    value: function collectRequiredElements() {\n      var self = this;\n      var requiredFields = [];\n      var sectionId = this.sectionId(); // Run trough section and look for checkboxes that is required\n\n      var _iterator6 = _createForOfIteratorHelper(document.querySelectorAll('.' + sectionId + ' .c-option__checkbox--hidden-box')),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var item = _step6.value;\n          // Listen to changes of checkbox\n          item.addEventListener(\"change\", function () {\n            requiredFields = self.evaluateCheckBox({\n              element: this,\n              required: requiredFields\n            });\n          }, false); // Check if there is anymore input left\n\n          if (item.hasAttribute('required') && !item.checked) {\n            requiredFields.push(item.getAttribute('id'));\n          } else {\n            requiredFields = self.evaluateCheckBox({\n              element: item,\n              required: requiredFields\n            });\n          } // Lock view if required fields not completed\n\n\n          if (requiredFields.length <= 0) {\n            this.lockView(false);\n          } else {\n            this.lockView(true);\n          }\n        } // return boolean result\n\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      if (requiredFields.length <= 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    /**\n     * Evaluate checkboxes\n     * @param params\n     * @returns {*}\n     */\n\n  }, {\n    key: \"evaluateCheckBox\",\n    value: function evaluateCheckBox(params) {\n      // Checkbox id\n      if (params.element.hasAttribute('required') && !params.element.checked) {\n        params.required.push(params.element.getAttribute('id'));\n      } // Checked or not\n\n\n      if (params.element.hasAttribute('required') && params.element.checked) {\n        for (var int = 0; int < params.required.length; int++) {\n          if (params.required.includes(params.element.id)) {\n            params.required.splice(params.required.indexOf(params.element.id), 1);\n          }\n        }\n      } // Lock view if not checked\n\n\n      if (params.required.length <= 0 || params.element.checked) {\n        this.lockView(false);\n      } else {\n        this.lockView(true);\n      }\n\n      return params.required;\n    }\n    /**\n     * Jump to next or previous\n     */\n\n  }, {\n    key: \"prevNextStep\",\n    value: function prevNextStep() {\n      var self = this;\n      /* if (!this.collectRequiredElements()) {\n           return false;\n       }*/\n\n      var checkRequirement = this.collectRequiredElements();\n\n      var _iterator7 = _createForOfIteratorHelper(document.body.querySelectorAll('.prevNext')),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var steps = _step7.value;\n          steps.addEventListener(\"click\", function () {\n            var currentStep = 0;\n            var count = 0;\n            var stepData = [];\n\n            var _iterator8 = _createForOfIteratorHelper(document.body.querySelectorAll('.guideSteps .c-option__radio--hidden-box')),\n                _step8;\n\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var stepCurrent = _step8.value;\n\n                if (!stepCurrent.checked) {\n                  stepData.push(stepCurrent.getAttribute('id'));\n                }\n\n                if (stepCurrent.checked) {\n                  currentStep = stepCurrent.getAttribute('value');\n                }\n\n                count++;\n              }\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n\n            if (this.classList.contains('nextStep')) {\n              var next = parseInt(currentStep - 1);\n              document.getElementById(stepData[next]).checked = true;\n              self.changeView(document.getElementById(stepData[next]));\n            }\n\n            if (this.classList.contains('prevStep')) {\n              var prev = parseInt(currentStep) - 2;\n              document.getElementById(stepData[prev]).checked = true;\n              self.changeView(document.getElementById(stepData[prev]));\n            }\n          }, false);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n    /**\n     * Lock section view until required are checked\n     * @param param\n     */\n\n  }, {\n    key: \"lockView\",\n    value: function lockView(param) {\n      var sectionId = this.sectionId();\n\n      var _iterator9 = _createForOfIteratorHelper(document.body.querySelectorAll('.c-option__radio--hidden-box')),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var item = _step9.value;\n\n          if (param) {\n            item.setAttribute('disabled', 'disabled');\n            document.getElementById(sectionId).querySelector('.prevNext').setAttribute('disabled', 'disabled');\n          } else {\n            item.removeAttribute('disabled');\n            document.getElementById(sectionId).querySelector('.prevNext').removeAttribute('disabled');\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n    /**\n     * Notice for unsolved required field\n     */\n\n  }, {\n    key: \"requiredNotice\",\n    value: function requiredNotice(element) {\n      if (element.getAttribute('type') === 'checkbox') {\n        return false;\n      }\n\n      document.querySelector('.c-notice-guide').classList.remove('c-notice-fade-away');\n      document.querySelector('.c-notice-guide .c-notice__message--sm').innerHTML = guides.lockMessage;\n      document.querySelector('.c-notice-guide').classList.add('displayNotice');\n      setTimeout(function () {\n        document.querySelector('.c-notice-guide').classList.add('c-notice-fade-away');\n      }, 4000);\n    }\n  }]);\n\n  return GuideDefault;\n}();\n\nnew GuideDefault();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source/js/modularity-guides.js\n");

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtRQUFBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBOzs7UUFHQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTtRQUNBO1FBQ0EsMENBQTBDLGdDQUFnQztRQUMxRTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBLHdEQUF3RCxrQkFBa0I7UUFDMUU7UUFDQSxpREFBaUQsY0FBYztRQUMvRDs7UUFFQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0EseUNBQXlDLGlDQUFpQztRQUMxRSxnSEFBZ0gsbUJBQW1CLEVBQUU7UUFDckk7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwyQkFBMkIsMEJBQTBCLEVBQUU7UUFDdkQsaUNBQWlDLGVBQWU7UUFDaEQ7UUFDQTtRQUNBOztRQUVBO1FBQ0Esc0RBQXNELCtEQUErRDs7UUFFckg7UUFDQTs7O1FBR0E7UUFDQSIsImZpbGUiOiJqcy9tb2R1bGFyaXR5LWd1aWRlcy5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NvdXJjZS9qcy9tb2R1bGFyaXR5LWd1aWRlcy5qc1wiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=