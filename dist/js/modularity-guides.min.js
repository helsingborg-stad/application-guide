!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t,n){"use strict";n.r(t);var i;i=jQuery,new function(){i("#modal-email-todo form").on("submit",(function(e){e.preventDefault();var t=i(e.target).parents(".grid").first();if(""===t.find('textarea[name="g-recaptcha-response"]').val())return!1;i(this).find('input[type="submit"]').hide(),i(this).find(".modal-footer").append('<div class="loading"><div></div><div></div><div></div><div></div></div>');var n=t.first().find("table").clone();n.appendTo(document.body),n.find("tr").not(":visible").remove();var r=n[0].outerHTML;n.remove();var o=encodeURI(r),a=t.find('textarea[name="g-recaptcha-response"]').val(),d={action:"email_todo",checklist:o,email:t.find('input[name="email"]').val(),captcha:a};return i.post(ajaxurl,d,(function(e){t.find(".loading").remove(),t.find('input[type="submit"]').show(),"success"==e?t.after('<div class="grid"><div class="grid-md-12"><div class="notice success">'+guides.email_sent+"</div></div></div>"):t.after('<div class="grid"><div class="grid-md-12"><div class="notice warning">'+guides.email_failed+"</div></div></div>"),location.hash=""})),!1}))},function(e){function t(){this.handleEvents(),this.contentToggleEngine()}t.prototype.handleEvents=function(){e('input[type="checkbox"][data-mod-guide-relation]').on("change",(function(t){var n=e(this).data("mod-guide-relation");n=n.split(","),e.each(n,(function(t,n){var i=e('input[type="checkbox"][data-mod-guide-toggle-key="'+n+'"]');i.prop("checked",!i.prop("checked")).trigger("change")}))})),e("[data-mod-guide-toggle-key]").on("change",function(e){this.contentToggleEngine()}.bind(this))},t.prototype.contentToggleEngine=function(){var t=[];e("[data-mod-guide-toggle-key]").each((function(n,i){!0===e(i).prop("checked")&&t.push(e(i).attr("data-mod-guide-toggle-key"))})),e("[data-mod-guide-toggle-key-content]").each((function(n,i){var r=!1,o=e(i).attr("data-mod-guide-toggle-key-content");o=o.split(","),e.each(o,(function(e,n){var i=n.match(/(^|\+)([^\+\-]+)/g),o=new RegExp("\\b("+i.join("|").replace("+","")+")\\b","ig"),a=t.join(",").match(o),d=null!==a&&a.length===i.length,u=n.match(/\-([^\+\-]+)/g),c=!0;if(null!==u){var l=new RegExp("\\b("+u.join("|").replace("-","")+")\\b","ig"),s=t.join(",").match(l);c=!(null!==s&&s.length>0)}d&&c&&(r=!0)})),!0!==r?e(i).hide():e(i).show()}))},new t}(jQuery);function r(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function a(e){var t;e.preventDefault();var n=e.target,i=e.target.classList.contains(".js-modularity-guide__next".substring(1)),r=null==n?void 0:n.closest(".js-modularity-guide"),o=null==n?void 0:n.closest(".js-modularity-guide__section"),a=parseInt(null!==(t=null==o?void 0:o.getAttribute("data-guide-step"))&&void 0!==t?t:"-1");if(a>0){var d=i?a+1:a-1,u=null==r?void 0:r.querySelector("[".concat("data-guide-step",'="').concat(d,'"]')),c=null==u?void 0:u.querySelector("[js-expand-button]");c&&c.click()}}function d(e){var t=[].concat(r(e.querySelectorAll(".js-modularity-guide__next")),r(e.querySelectorAll(".js-modularity-guide__prev")));t.length>0&&t.forEach((function(e){e.addEventListener("click",a)}))}window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelectorAll(".js-modularity-guide");e&&e.length>0&&e.forEach(d)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,