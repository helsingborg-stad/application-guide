!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t,n){"use strict";n.r(t);var i;(function(e){function t(){this.handleEvents(),this.contentToggleEngine()}t.prototype.handleEvents=function(){e('input[type="checkbox"][data-mod-guide-relation]').on("change",(function(t){var n=e(this).data("mod-guide-relation");n=n.split(","),e.each(n,(function(t,n){var i=e('input[type="checkbox"][data-mod-guide-toggle-key="'+n+'"]');i.prop("checked",!i.prop("checked")).trigger("change")}))})),e("[data-mod-guide-toggle-key]").on("change",function(e){this.contentToggleEngine()}.bind(this))},t.prototype.contentToggleEngine=function(){var t=[];e("[data-mod-guide-toggle-key]").each((function(n,i){!0===e(i).prop("checked")&&t.push(e(i).attr("data-mod-guide-toggle-key"))})),e("[data-mod-guide-toggle-key-content]").each((function(n,i){var o=!1,a=e(i).attr("data-mod-guide-toggle-key-content");a=a.split(","),e.each(a,(function(e,n){var i=n.match(/(^|\+)([^\+\-]+)/g),a=new RegExp("\\b("+i.join("|").replace("+","")+")\\b","ig"),r=t.join(",").match(a),d=null!==r&&r.length===i.length,c=n.match(/\-([^\+\-]+)/g),l=!0;if(null!==c){var u=new RegExp("\\b("+c.join("|").replace("-","")+")\\b","ig"),s=t.join(",").match(u);l=!(null!==s&&s.length>0)}d&&l&&(o=!0)})),!0!==o?e(i).hide():e(i).show()}))},new t})(jQuery),i=jQuery,new function(){i("#modal-email-todo form").on("submit",(function(e){e.preventDefault();var t=i(e.target).parents(".grid").first();if(""===t.find('textarea[name="g-recaptcha-response"]').val())return!1;i(this).find('input[type="submit"]').hide(),i(this).find(".modal-footer").append('<div class="loading"><div></div><div></div><div></div><div></div></div>');var n=t.first().find("table").clone();n.appendTo(document.body),n.find("tr").not(":visible").remove(),checklistHTML=n[0].outerHTML,n.remove(),checklist=encodeURI(checklistHTML);var o=t.find('textarea[name="g-recaptcha-response"]').val(),a={action:"email_todo",checklist:checklist,email:t.find('input[name="email"]').val(),captcha:o};return i.post(ajaxurl,a,(function(e){t.find(".loading").remove(),t.find('input[type="submit"]').show(),"success"==e?t.after('<div class="grid"><div class="grid-md-12"><div class="notice success">'+guides.email_sent+"</div></div></div>"):t.after('<div class="grid"><div class="grid-md-12"><div class="notice warning">'+guides.email_failed+"</div></div></div>"),location.hash=""})),!1}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2pzL0NvbnRlbnQvQ2hlY2tib3hlcy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvanMvQ29udGVudC9Ub2RvLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiJCIsIkNoZWNrYm94ZXMiLCJ0aGlzIiwiaGFuZGxlRXZlbnRzIiwiY29udGVudFRvZ2dsZUVuZ2luZSIsIm9uIiwiZSIsInJlbGF0aW9ucyIsImRhdGEiLCJzcGxpdCIsImVhY2giLCJpbmRleCIsIml0ZW0iLCIkY2IiLCJwcm9wIiwidHJpZ2dlciIsImNoZWNrZWQiLCJlbGVtZW50IiwicHVzaCIsImF0dHIiLCJzaG91bGRTaG93IiwiY29uZGl0aW9ucyIsImFuZCIsIm1hdGNoIiwiYW5kUGF0dGVybiIsIlJlZ0V4cCIsImpvaW4iLCJyZXBsYWNlIiwiYW5kTWF0Y2hlcyIsImFuZElzTWF0Y2hpbmciLCJsZW5ndGgiLCJhbmRub3QiLCJhbmRub3RJc01hdGNoaW5nIiwiYW5kbm90UGF0dGVybiIsImFuZG5vdE1hdGNoZXMiLCJoaWRlIiwic2hvdyIsImpRdWVyeSIsInByZXZlbnREZWZhdWx0IiwiJGNvbnRhaW5lciIsInRhcmdldCIsInBhcmVudHMiLCJmaXJzdCIsImZpbmQiLCJ2YWwiLCJhcHBlbmQiLCIkY2hlY2tsaXN0IiwiY2xvbmUiLCJhcHBlbmRUbyIsImRvY3VtZW50IiwiYm9keSIsIm5vdCIsInJlbW92ZSIsImNoZWNrbGlzdEhUTUwiLCJvdXRlckhUTUwiLCJjaGVja2xpc3QiLCJlbmNvZGVVUkkiLCJnQ2FwdGNoYSIsImFjdGlvbiIsImVtYWlsIiwiY2FwdGNoYSIsInBvc3QiLCJhamF4dXJsIiwicmVzcG9uc2UiLCJhZnRlciIsImd1aWRlcyIsImVtYWlsX3NlbnQiLCJlbWFpbF9mYWlsZWQiLCJsb2NhdGlvbiIsImhhc2giXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxNQUd2QixHQUZBMUIsRUFBb0JrQixFQUFFTyxHQUN0QlgsT0FBT0MsZUFBZVUsRUFBSSxVQUFXLENBQUVULFlBQVksRUFBTUssTUFBT0EsSUFDdEQsRUFBUEUsR0FBNEIsaUJBQVRGLEVBQW1CLElBQUksSUFBSU0sS0FBT04sRUFBT3JCLEVBQW9CVSxFQUFFZSxFQUFJRSxFQUFLLFNBQVNBLEdBQU8sT0FBT04sRUFBTU0sSUFBUUMsS0FBSyxLQUFNRCxJQUM5SSxPQUFPRixHQUlSekIsRUFBb0I2QixFQUFJLFNBQVMxQixHQUNoQyxJQUFJUyxFQUFTVCxHQUFVQSxFQUFPcUIsV0FDN0IsV0FBd0IsT0FBT3JCLEVBQWdCLFNBQy9DLFdBQThCLE9BQU9BLEdBRXRDLE9BREFILEVBQW9CVSxFQUFFRSxFQUFRLElBQUtBLEdBQzVCQSxHQUlSWixFQUFvQmEsRUFBSSxTQUFTaUIsRUFBUUMsR0FBWSxPQUFPakIsT0FBT2tCLFVBQVVDLGVBQWUxQixLQUFLdUIsRUFBUUMsSUFHekcvQixFQUFvQmtDLEVBQUksR0FJakJsQyxFQUFvQkEsRUFBb0JtQyxFQUFJLEcsdUNDbEZ0QyxJQ0FXQyxHREFYLFNBQVdBLEdBRXRCLFNBQVNDLElBQ0xDLEtBQUtDLGVBQ0xELEtBQUtFLHNCQUdUSCxFQUFXTCxVQUFVTyxhQUFlLFdBQ2hDSCxFQUFFLG1EQUFtREssR0FBRyxVQUFVLFNBQVVDLEdBQ3hFLElBQUlDLEVBQVlQLEVBQUVFLE1BQU1NLEtBQUssc0JBQzdCRCxFQUFZQSxFQUFVRSxNQUFNLEtBRTVCVCxFQUFFVSxLQUFLSCxHQUFXLFNBQVVJLEVBQU9DLEdBQy9CLElBQUlDLEVBQU1iLEVBQUUscURBQXVEWSxFQUFPLE1BQzFFQyxFQUFJQyxLQUFLLFdBQVlELEVBQUlDLEtBQUssWUFBWUMsUUFBUSxnQkFJMURmLEVBQUUsK0JBQStCSyxHQUFHLFNBQVUsU0FBVUMsR0FDcERKLEtBQUtFLHVCQUNQWixLQUFLVSxRQUdYRCxFQUFXTCxVQUFVUSxvQkFBc0IsV0FFdkMsSUFBSVksRUFBVSxHQUNJaEIsRUFBRSwrQkFFUlUsTUFBSyxTQUFVQyxFQUFPTSxJQUNLLElBQS9CakIsRUFBRWlCLEdBQVNILEtBQUssWUFJcEJFLEVBQVFFLEtBQUtsQixFQUFFaUIsR0FBU0UsS0FBSyxpQ0FJakNuQixFQUFFLHVDQUF1Q1UsTUFBSyxTQUFVQyxFQUFPTSxHQUMzRCxJQUFJRyxHQUFhLEVBQ2JDLEVBQWFyQixFQUFFaUIsR0FBU0UsS0FBSyxxQ0FDakNFLEVBQWFBLEVBQVdaLE1BQU0sS0FHOUJULEVBQUVVLEtBQUtXLEdBQVksU0FBVVYsRUFBT0MsR0FDaEMsSUFBSVUsRUFBTVYsRUFBS1csTUFBTSxxQkFDakJDLEVBQWEsSUFBSUMsT0FBTyxPQUFTSCxFQUFJSSxLQUFLLEtBQUtDLFFBQVEsSUFBSyxJQUFNLE9BQVEsTUFDMUVDLEVBQWFaLEVBQVFVLEtBQUssS0FBS0gsTUFBTUMsR0FDckNLLEVBQStCLE9BQWZELEdBQXVCQSxFQUFXRSxTQUFXUixFQUFJUSxPQUVqRUMsRUFBU25CLEVBQUtXLE1BQU0saUJBQ3BCUyxHQUFtQixFQUN2QixHQUFlLE9BQVhELEVBQWlCLENBQ2pCLElBQUlFLEVBQWdCLElBQUlSLE9BQU8sT0FBU00sRUFBT0wsS0FBSyxLQUFLQyxRQUFRLElBQUssSUFBTSxPQUFRLE1BQ2hGTyxFQUFnQmxCLEVBQVFVLEtBQUssS0FBS0gsTUFBTVUsR0FDNUNELElBQXVDLE9BQWxCRSxHQUEwQkEsRUFBY0osT0FBUyxHQUd0RUQsR0FBaUJHLElBQ2pCWixHQUFhLE9BS0YsSUFBZkEsRUFLSnBCLEVBQUVpQixHQUFTa0IsT0FKUG5DLEVBQUVpQixHQUFTbUIsV0FTaEIsSUFBSW5DLEdBekVBLENBMkVab0MsUUMzRXVCckMsRUFrRHZCcUMsT0FGUSxJQTlDUCxXQUNJckMsRUFBRSwwQkFBMEJLLEdBQUcsVUFBVSxTQUFVQyxHQUMvQ0EsRUFBRWdDLGlCQUVGLElBQUlDLEVBQWF2QyxFQUFFTSxFQUFFa0MsUUFBUUMsUUFBUSxTQUFTQyxRQUM5QyxHQUF1RSxLQUFuRUgsRUFBV0ksS0FBSyx5Q0FBeUNDLE1BQ3pELE9BQU8sRUFHWDVDLEVBQUVFLE1BQU15QyxLQUFLLHdCQUF3QlIsT0FDckNuQyxFQUFFRSxNQUFNeUMsS0FBSyxpQkFBaUJFLE9BQU8sMkVBRXJDLElBQUlDLEVBQWFQLEVBQVdHLFFBQVFDLEtBQUssU0FBU0ksUUFDbERELEVBQVdFLFNBQVNDLFNBQVNDLE1BQzdCSixFQUFXSCxLQUFLLE1BQU1RLElBQUksWUFBWUMsU0FDdENDLGNBQWdCUCxFQUFXLEdBQUdRLFVBQzlCUixFQUFXTSxTQUVYRyxVQUFZQyxVQUFVSCxlQUV0QixJQUFJSSxFQUFXbEIsRUFBV0ksS0FBSyx5Q0FBeUNDLE1BRXBFcEMsRUFBTyxDQUNQa0QsT0FBUSxhQUNSSCxVQUFXQSxVQUNYSSxNQUFPcEIsRUFBV0ksS0FBSyx1QkFBdUJDLE1BQzlDZ0IsUUFBU0gsR0FnQmIsT0FiQXpELEVBQUU2RCxLQUFLQyxRQUFTdEQsR0FBTSxTQUFVdUQsR0FDNUJ4QixFQUFXSSxLQUFLLFlBQVlTLFNBQzVCYixFQUFXSSxLQUFLLHdCQUF3QlAsT0FFeEIsV0FBWjJCLEVBQ0F4QixFQUFXeUIsTUFBTSx5RUFBMkVDLE9BQU9DLFdBQWEsc0JBRWhIM0IsRUFBV3lCLE1BQU0seUVBQTJFQyxPQUFPRSxhQUFlLHNCQUd0SEMsU0FBU0MsS0FBTyxPQUdiIiwiZmlsZSI6ImpzL21vZHVsYXJpdHktZ3VpZGVzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoJCkge1xuXG4gICAgZnVuY3Rpb24gQ2hlY2tib3hlcygpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVFdmVudHMoKTtcbiAgICAgICAgdGhpcy5jb250ZW50VG9nZ2xlRW5naW5lKCk7XG4gICAgfVxuXG4gICAgQ2hlY2tib3hlcy5wcm90b3R5cGUuaGFuZGxlRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICQoJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXVtkYXRhLW1vZC1ndWlkZS1yZWxhdGlvbl0nKS5vbignY2hhbmdlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHZhciByZWxhdGlvbnMgPSAkKHRoaXMpLmRhdGEoJ21vZC1ndWlkZS1yZWxhdGlvbicpO1xuICAgICAgICAgICAgcmVsYXRpb25zID0gcmVsYXRpb25zLnNwbGl0KCcsJyk7XG5cbiAgICAgICAgICAgICQuZWFjaChyZWxhdGlvbnMsIGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciAkY2IgPSAkKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl1bZGF0YS1tb2QtZ3VpZGUtdG9nZ2xlLWtleT1cIicgKyBpdGVtICsgJ1wiXScpO1xuICAgICAgICAgICAgICAgICRjYi5wcm9wKCdjaGVja2VkJywgISRjYi5wcm9wKCdjaGVja2VkJykpLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJ1tkYXRhLW1vZC1ndWlkZS10b2dnbGUta2V5XScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50VG9nZ2xlRW5naW5lKCk7XG4gICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgfTtcblxuICAgIENoZWNrYm94ZXMucHJvdG90eXBlLmNvbnRlbnRUb2dnbGVFbmdpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gR2V0IGNoZWNrZWQgY2hlY2tib3hlc1xuICAgICAgICB2YXIgY2hlY2tlZCA9IFtdO1xuICAgICAgICB2YXIgJGNoZWNrYm94ZXMgPSAkKCdbZGF0YS1tb2QtZ3VpZGUtdG9nZ2xlLWtleV0nKTtcblxuICAgICAgICAkY2hlY2tib3hlcy5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCQoZWxlbWVudCkucHJvcCgnY2hlY2tlZCcpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGVja2VkLnB1c2goJChlbGVtZW50KS5hdHRyKCdkYXRhLW1vZC1ndWlkZS10b2dnbGUta2V5JykpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBEaXNwbGF5IG9yIGhpZGUgY29udGVudFxuICAgICAgICAkKCdbZGF0YS1tb2QtZ3VpZGUtdG9nZ2xlLWtleS1jb250ZW50XScpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgc2hvdWxkU2hvdyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGNvbmRpdGlvbnMgPSAkKGVsZW1lbnQpLmF0dHIoJ2RhdGEtbW9kLWd1aWRlLXRvZ2dsZS1rZXktY29udGVudCcpO1xuICAgICAgICAgICAgY29uZGl0aW9ucyA9IGNvbmRpdGlvbnMuc3BsaXQoJywnKTtcblxuICAgICAgICAgICAgLy8gRGF0ZXJtaW5kIGlmIGNvbnRlbnQgc2hvdWxkIGJlIHNob3duIG9yIG5vdFxuICAgICAgICAgICAgJC5lYWNoKGNvbmRpdGlvbnMsIGZ1bmN0aW9uIChpbmRleCwgaXRlbSkge1xuICAgICAgICAgICAgICAgIHZhciBhbmQgPSBpdGVtLm1hdGNoKC8oXnxcXCspKFteXFwrXFwtXSspL2cpO1xuICAgICAgICAgICAgICAgIHZhciBhbmRQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnXFxcXGIoJyArIGFuZC5qb2luKCd8JykucmVwbGFjZSgnKycsICcnKSArICcpXFxcXGInLCAnaWcnKTtcbiAgICAgICAgICAgICAgICB2YXIgYW5kTWF0Y2hlcyA9IGNoZWNrZWQuam9pbignLCcpLm1hdGNoKGFuZFBhdHRlcm4pO1xuICAgICAgICAgICAgICAgIHZhciBhbmRJc01hdGNoaW5nID0gYW5kTWF0Y2hlcyAhPT0gbnVsbCAmJiBhbmRNYXRjaGVzLmxlbmd0aCA9PT0gYW5kLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIHZhciBhbmRub3QgPSBpdGVtLm1hdGNoKC9cXC0oW15cXCtcXC1dKykvZyk7XG4gICAgICAgICAgICAgICAgdmFyIGFuZG5vdElzTWF0Y2hpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChhbmRub3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuZG5vdFBhdHRlcm4gPSBuZXcgUmVnRXhwKCdcXFxcYignICsgYW5kbm90LmpvaW4oJ3wnKS5yZXBsYWNlKCctJywgJycpICsgJylcXFxcYicsICdpZycpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYW5kbm90TWF0Y2hlcyA9IGNoZWNrZWQuam9pbignLCcpLm1hdGNoKGFuZG5vdFBhdHRlcm4pO1xuICAgICAgICAgICAgICAgICAgICBhbmRub3RJc01hdGNoaW5nID0gIShhbmRub3RNYXRjaGVzICE9PSBudWxsICYmIGFuZG5vdE1hdGNoZXMubGVuZ3RoID4gMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGFuZElzTWF0Y2hpbmcgJiYgYW5kbm90SXNNYXRjaGluZykge1xuICAgICAgICAgICAgICAgICAgICBzaG91bGRTaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSGlkZSBvciBzaG93XG4gICAgICAgICAgICBpZiAoc2hvdWxkU2hvdyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQoZWxlbWVudCkuc2hvdygpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJChlbGVtZW50KS5oaWRlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IENoZWNrYm94ZXMoKTtcblxufSkoalF1ZXJ5KTtcbiIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAoJCkge1xuXG4gICAgZnVuY3Rpb24gVG9kbygpIHtcbiAgICAgICAgJCgnI21vZGFsLWVtYWlsLXRvZG8gZm9ybScpLm9uKCdzdWJtaXQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICB2YXIgJGNvbnRhaW5lciA9ICQoZS50YXJnZXQpLnBhcmVudHMoJy5ncmlkJykuZmlyc3QoKTtcbiAgICAgICAgICAgIGlmICgkY29udGFpbmVyLmZpbmQoJ3RleHRhcmVhW25hbWU9XCJnLXJlY2FwdGNoYS1yZXNwb25zZVwiXScpLnZhbCgpID09PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdpbnB1dFt0eXBlPVwic3VibWl0XCJdJykuaGlkZSgpO1xuICAgICAgICAgICAgJCh0aGlzKS5maW5kKCcubW9kYWwtZm9vdGVyJykuYXBwZW5kKCc8ZGl2IGNsYXNzPVwibG9hZGluZ1wiPjxkaXY+PC9kaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjxkaXY+PC9kaXY+PC9kaXY+Jyk7XG5cbiAgICAgICAgICAgIHZhciAkY2hlY2tsaXN0ID0gJGNvbnRhaW5lci5maXJzdCgpLmZpbmQoJ3RhYmxlJykuY2xvbmUoKTtcbiAgICAgICAgICAgICRjaGVja2xpc3QuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSk7XG4gICAgICAgICAgICAkY2hlY2tsaXN0LmZpbmQoJ3RyJykubm90KCc6dmlzaWJsZScpLnJlbW92ZSgpO1xuICAgICAgICAgICAgY2hlY2tsaXN0SFRNTCA9ICRjaGVja2xpc3RbMF0ub3V0ZXJIVE1MO1xuICAgICAgICAgICAgJGNoZWNrbGlzdC5yZW1vdmUoKTtcblxuICAgICAgICAgICAgY2hlY2tsaXN0ID0gZW5jb2RlVVJJKGNoZWNrbGlzdEhUTUwpO1xuXG4gICAgICAgICAgICB2YXIgZ0NhcHRjaGEgPSAkY29udGFpbmVyLmZpbmQoJ3RleHRhcmVhW25hbWU9XCJnLXJlY2FwdGNoYS1yZXNwb25zZVwiXScpLnZhbCgpO1xuXG4gICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBhY3Rpb246ICdlbWFpbF90b2RvJyxcbiAgICAgICAgICAgICAgICBjaGVja2xpc3Q6IGNoZWNrbGlzdCxcbiAgICAgICAgICAgICAgICBlbWFpbDogJGNvbnRhaW5lci5maW5kKCdpbnB1dFtuYW1lPVwiZW1haWxcIl0nKS52YWwoKSxcbiAgICAgICAgICAgICAgICBjYXB0Y2hhOiBnQ2FwdGNoYVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5wb3N0KGFqYXh1cmwsIGRhdGEsIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICRjb250YWluZXIuZmluZCgnLmxvYWRpbmcnKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAkY29udGFpbmVyLmZpbmQoJ2lucHV0W3R5cGU9XCJzdWJtaXRcIl0nKS5zaG93KCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgPT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICRjb250YWluZXIuYWZ0ZXIoJzxkaXYgY2xhc3M9XCJncmlkXCI+PGRpdiBjbGFzcz1cImdyaWQtbWQtMTJcIj48ZGl2IGNsYXNzPVwibm90aWNlIHN1Y2Nlc3NcIj4nICsgZ3VpZGVzLmVtYWlsX3NlbnQgKyAnPC9kaXY+PC9kaXY+PC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJGNvbnRhaW5lci5hZnRlcignPGRpdiBjbGFzcz1cImdyaWRcIj48ZGl2IGNsYXNzPVwiZ3JpZC1tZC0xMlwiPjxkaXYgY2xhc3M9XCJub3RpY2Ugd2FybmluZ1wiPicgKyBndWlkZXMuZW1haWxfZmFpbGVkICsgJzwvZGl2PjwvZGl2PjwvZGl2PicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVG9kbygpO1xuXG59KShqUXVlcnkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==