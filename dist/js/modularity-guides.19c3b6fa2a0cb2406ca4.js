!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([,function(e,t,n){"use strict";function r(e,t,n,r,o,i,a){try{var c=e[i](a),u=c.value}catch(e){return void n(e)}c.done?t(u):Promise.resolve(u).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,i){var a=e.apply(t,n);function c(e){r(a,o,i,c,u,"next",e)}function u(e){r(a,o,i,c,u,"throw",e)}c(void 0)}))}}function i(e){return function(e){if(Array.isArray(e))return a(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return a(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.r(t);(function(e){var t={info:"c-notice--info",success:"c-notice--success",danger:"c-notice--danger",warning:"c-notice--warning"},n={};function r(n){var r,o;n.preventDefault();var a=n.target,c=a.closest(".js-modularity-guide-todos"),u=null==a||null===(r=a.querySelector('textarea[name="g-recaptcha-response"]'))||void 0===r?void 0:r.value,l=null==a||null===(o=a.querySelector('input[name="email"]'))||void 0===o?void 0:o.value;if(""===u)return!1;function d(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"info",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=c.querySelector(".js-modularity-guide-todos__notice"),a=o.querySelectorAll("c-icon"),u=o.classList,l=t[n];if(!1!==e){if(l&&!u.contains(l)&&(i(u).filter((function(e){return Object.values(t).includes(e)})).forEach((function(e){u.remove(e)})),u.add(l)),e.length>0){var d=o.querySelectorAll("span"),s=2===d.length?d[1]:d[0];s.innerHTML=e,r.length>0&&a&&(a.innerHTML=r),u.remove("u-display--none")}}else u.contains("u-display--none")||u.add("u-display--none")}d(!1);var s=null==c?void 0:c.querySelector(".js-modularity-guide-todos__table");if(s&&l&&ajaxurl){c.classList.toggle("is-loading");var f={action:"email_todo",checklist:function(e){var t,n,r=e.cloneNode(!0);null===(t=r=document.body.appendChild(r))||void 0===t||null===(n=t.querySelectorAll("tr"))||void 0===n||n.forEach((function(e){var t;(t=e).offsetWidth>0||t.offsetHeight>0||t.getClientRects().length>0||e.remove()}));var o=r.outerHTML;return r.remove(),encodeURI(o)}(s),email:l,captcha:u};e.post(ajaxurl,f,(function(e){c.classList.toggle("is-loading"),"success"==e?(d(guides.email_sent,"success","report"),setTimeout((function(){d(!1);var e=c.querySelector(".js-modularity-guide-todos__modal .c-modal__close");e&&e.click()}),2e3)):d(guides.email_failed,"danger","report")}))}}function a(e,t){var r=e.querySelector(".js-modularity-guide-todos__modal-trigger");null==r||r.addEventListener("click",(function(){!function(e,t){var r,i=null==e?void 0:e.querySelector(".js-modularity-guide-todos__grecaptcha"),a=null==i?void 0:i.getAttribute("data-sitekey");function c(e){return u.apply(this,arguments)}function u(){return(u=o(regeneratorRuntime.mark((function r(o){return regeneratorRuntime.wrap((function(r){for(;;)switch(r.prev=r.next){case 0:try{e.classList.toggle("is-disabled"),e.classList.contains("is-disabled")&&grecaptcha.reset(n["GreCaptchaWidget-".concat(t)])}catch(e){console.log(e)}case 1:case"end":return r.stop()}}),r)})))).apply(this,arguments)}(null===(r=grecaptcha)||void 0===r?void 0:r.render)&&i&&a&&(e.classList.toggle("is-disabled"),n["GreCaptchaWidget-".concat(t)]=grecaptcha.render(i,{sitekey:a,callback:c,"expired-callback":c}))}(e,t)}),{once:!0})}window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelectorAll(".js-modularity-guide-todos");(null==e?void 0:e.length)>0&&e.forEach((function(e,t){a(e,t),function(e,t){var n;null==e||null===(n=e.querySelector(".js-modularity-guide-todos__form"))||void 0===n||n.addEventListener("submit",r)}(e)}))}))})(jQuery),function(e){function t(){this.handleEvents(),this.contentToggleEngine()}t.prototype.handleEvents=function(){e('input[type="checkbox"][data-mod-guide-relation]').on("change",(function(t){var n=e(this).data("mod-guide-relation");n=n.split(","),e.each(n,(function(t,n){var r=e('input[type="checkbox"][data-mod-guide-toggle-key="'+n+'"]');r.prop("checked",!r.prop("checked")).trigger("change")}))})),e("[data-mod-guide-toggle-key]").on("change",function(e){this.contentToggleEngine()}.bind(this))},t.prototype.contentToggleEngine=function(){var t=[];e("[data-mod-guide-toggle-key]").each((function(n,r){!0===e(r).prop("checked")&&t.push(e(r).attr("data-mod-guide-toggle-key"))})),e("[data-mod-guide-toggle-key-content]").each((function(n,r){var o=!1,i=e(r).attr("data-mod-guide-toggle-key-content");i=i.split(","),e.each(i,(function(e,n){var r=n.match(/(^|\+)([^\+\-]+)/g),i=new RegExp("\\b("+r.join("|").replace("+","")+")\\b","ig"),a=t.join(",").match(i),c=null!==a&&a.length===r.length,u=n.match(/\-([^\+\-]+)/g),l=!0;if(null!==u){var d=new RegExp("\\b("+u.join("|").replace("-","")+")\\b","ig"),s=t.join(",").match(d);l=!(null!==s&&s.length>0)}c&&l&&(o=!0)})),!0!==o?e(r).hide():e(r).show()}))},new t}(jQuery);function c(e){return function(e){if(Array.isArray(e))return u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return u(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function l(e){var t;e.preventDefault();var n=e.target,r=e.target.classList.contains(".js-modularity-guide__next".substring(1)),o=null==n?void 0:n.closest(".js-modularity-guide"),i=null==n?void 0:n.closest(".js-modularity-guide__section"),a=parseInt(null!==(t=null==i?void 0:i.getAttribute("data-guide-step"))&&void 0!==t?t:"-1");if(a>0){var c=r?a+1:a-1,u=null==o?void 0:o.querySelector("[".concat("data-guide-step",'="').concat(c,'"]')),l=null==u?void 0:u.querySelector("[js-expand-button]");l&&l.click()}}function d(e){var t=[].concat(c(e.querySelectorAll("".concat(".js-modularity-guide__section"," ").concat(".js-modularity-guide__next"))),c(e.querySelectorAll("".concat(".js-modularity-guide__section"," ").concat(".js-modularity-guide__prev"))));t.length>0&&t.forEach((function(e){e.addEventListener("click",l)}))}window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelectorAll(".js-modularity-guide");e&&e.length>0&&e.forEach(d)}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,